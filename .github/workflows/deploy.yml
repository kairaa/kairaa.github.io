# Docker deployment to your own server
#
name: Deploy Blog to Server

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "server-deploy"
  cancel-in-progress: false

jobs:
  # Build and deploy job
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL || 'https://gw.kaira.me/api' }} \
            --build-arg NEXT_PUBLIC_USE_MOCK_DATA=${{ vars.NEXT_PUBLIC_USE_MOCK_DATA || 'false' }} \
            --build-arg NEXT_PUBLIC_API_TOKEN=${{ secrets.NEXT_PUBLIC_API_TOKEN || '' }} \
            -t kaira-blog:latest .

      - name: Test Docker Image
        run: |
          # Run container in background for testing
          docker run -d --name test-blog -p 3000:3000 kaira-blog:latest
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3000/api/health || exit 1
          
          # Stop test container
          docker stop test-blog
          docker rm test-blog
          
          echo "Docker build and test completed successfully!"